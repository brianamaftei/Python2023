import os
import shutil
import sys
import tempfile
import zipfile
from datetime import datetime

from Folder import Folder
from Ftp import Ftp
from Zip import Zip
from File import File


def parse_location(location):
    try:
        if location.count(":") < 1:
            raise ValueError("Invalid location type")
        type_location = location.split(":", 1)[0]
        location_path = location.split(":", 1)[1]
        if type_location == "ftp":
            return Ftp(location_path)
        elif type_location == "zip":
            return Zip(location_path)
        elif type_location == "folder":
            return Folder(location_path)
        else:
            raise ValueError("Invalid location type")
    except ValueError as e:
        print(type(e), str(e))
        sys.exit(1)


def print_dictionary(dictionary):
    for key in dictionary:
        print("Key: " + key + " Value: " + dictionary[key].__str__())


class Sync:
    def __init__(self, arg1, arg2):
        self.location_1 = parse_location(arg1)
        self.location_2 = parse_location(arg2)
        self.location_1_2_files = {}
        self.differences = {}
        self.keys_directories = {}

    def start(self):
        print("First Location: " + self.location_1.__str__())
        print("Second Location: " + self.location_2.__str__())
        self.location_1.print_files()
        self.location_2.print_files()
        self.check_differences()
        self.update_location_1_2()
        print("Differences:")
        print_dictionary(self.location_1_2_files)
        print("Differences:")
        print_dictionary(self.differences)

    def check_differences(self):
        if isinstance(self.location_1, Folder):
            self.folder_status_files(self.location_1.get_location(), self.location_1.get_location(), 1,
                                     self.differences,
                                     self.location_1_2_files)
        elif isinstance(self.location_1, Zip):
            self.zip_status_files(self.location_1.get_location(), self.location_1.get_location(), 1, self.differences,
                                  self.location_1_2_files)

        if isinstance(self.location_2, Folder):
            self.folder_status_files(self.location_2.get_location(), self.location_2.get_location(), 2,
                                     self.differences,
                                     self.location_1_2_files)
        elif isinstance(self.location_2, Zip):
            self.zip_status_files(self.location_2.get_location(), self.location_2.get_location(), 2, self.differences,
                                  self.location_1_2_files)

    def update_location_1_2(self):
        self.location_1_2_files.clear()
        self.location_1_2_files.update(self.differences)
        self.differences.clear()

    def folder_status_files(self, first_location, main_path, location_number, location_current_files,
                            location_1_2_files):
        try:
            list_of_files = os.listdir(main_path)
            for file in location_1_2_files:
                abs_path = os.path.join(main_path, file)
                key = abs_path.split(first_location, 1)[1]
                if file not in list_of_files:
                    location_current_files[key] = (location_1_2_files[file][0], "deleted", location_number)
                else:
                    location_current_files[key] = (
                        location_1_2_files[file][0], "unchanged", location_1_2_files[file][2])

            for file in list_of_files:
                path = file
                abs_path = os.path.join(main_path, file)
                key = abs_path.split(first_location, 1)[1]
                data_modified = datetime.fromtimestamp(os.path.getmtime(os.path.join(main_path, file)))
                if file not in location_1_2_files:
                    if file not in location_current_files:
                        location_current_files[key] = (
                            File(path=path, name=file, data_modified=data_modified, parent=main_path),
                            "added", location_number)
                    else:
                        if location_current_files[key][0].data_modified < data_modified:
                            location_current_files[key] = (
                                File(path=path, name=file, data_modified=data_modified, parent=main_path),
                                "modified", location_number)
                        elif location_current_files[key][0].data_modified == data_modified:
                            location_current_files[key] = (
                                File(path=path, name=file, data_modified=data_modified, parent=main_path),
                                "unchanged", location_number)

                elif location_1_2_files[key][0].data_modified < data_modified:
                    location_current_files[key] = (
                        File(path=path, name=file, data_modified=data_modified, parent=main_path),
                        "modified", location_number)

                    if os.path.isdir(abs_path):
                        self.keys_directories[key] = location_current_files[key]
                        self.folder_status_files(first_location, abs_path, location_number,
                                                 location_current_files[key],
                                                 location_1_2_files)
                    elif os.path.isfile(abs_path) and file.endswith(".zip"):
                        temp_dir = tempfile.mkdtemp()
                        extracted_zip_path = os.path.join(temp_dir, file)
                        z.extract(file, temp_dir)
                        location_current_files[key][0].set_temporary_path(extracted_zip_path)
                        self.keys_directories[key] = location_current_files[key]
                        self.folder_status_files(extracted_zip_path, extracted_zip_path, location_number,
                                                 location_current_files[key],
                                                 location_1_2_files)

        except OSError as e:
            print(f"Error at checking the differences in folder {main_path}", type(e), str(e))
            sys.exit(1)

    def zip_status_files(self, first_location, main_path, location_number, location_current_files, location_1_2_files):
        try:
            with zipfile.ZipFile(main_path) as z:

                temp_dir = tempfile.mkdtemp()
                extracted_zip_path = os.path.join(temp_dir, main_path)
                z.extract(main_path, temp_dir)

                main_path = extracted_zip_path
                first_location = extracted_zip_path


            for file in location_1_2_files:
                abs_path = os.path.join(main_path, file)
                key = abs_path.split(first_location, 1)[1]
                if key not in z.namelist():
                    location_current_files[key] = (location_current_files[file][0], "deleted", location_number)
                else:
                    location_current_files[key] = (location_1_2_files[file][0], "unchanged",
                                                   location_current_files[file][2])

            for i in z.infolist():
                name = os.path.basename(i.filename)
                abs_path = os.path.join(main_path, name)
                key = abs_path.split(first_location, 1)[1]
                data_modified = datetime(*i.date_time)
                if key not in location_1_2_files:
                    if key not in location_current_files:
                        location_current_files[key] = (
                            File(path=i.filename, name=name, data_modified=data_modified, parent=main_path),
                            "added", location_number)
                    elif location_current_files[key][0].data_modified < data_modified:
                        location_current_files[key] = (
                            File(path=i.filename, name=name, data_modified=data_modified, parent=main_path),
                            "modified", location_number)
                    elif location_current_files[key][0].data_modified == data_modified:
                        location_current_files[key] = (
                            File(path=i.filename, name=name, data_modified=data_modified, parent=main_path),
                            "unchanged", location_number)
                elif location_1_2_files[key][0].data_modified < data_modified:
                    location_current_files[key] = (
                        File(path=i.filename, name=name, data_modified=data_modified, parent=main_path),
                        "modified", location_number)

                    if os.path.isdir(abs_path):
                        self.keys_directories[key] = location_current_files[key]
                        self.folder_status_files(first_location, abs_path, location_number,
                                                 location_current_files[key],
                                                 location_1_2_files)
                    elif os.path.isfile(abs_path) and file.endswith(".zip"):
                        temp_dir = tempfile.mkdtemp()
                        extracted_zip_path = os.path.join(temp_dir, file)
                        z.extract(file, temp_dir)
                        location_current_files[key][0].set_temporary_path(extracted_zip_path)
                        self.keys_directories[key] = location_current_files[key]
                        self.folder_status_files(extracted_zip_path, extracted_zip_path, location_number,
                                                 location_current_files[key],
                                                 location_1_2_files)
            return 1

        except zipfile.BadZipFile as e:
            print(f"Error at checking the differences in zip {main_path}", type(e), str(e))
            sys.exit(1)


#                            shutil.rmtree(temp_dir)
#                            location_current_files[key][0].set_temporary_path(None)
def main():
    if len(sys.argv) != 3:
        print("Sunt necesare 3 argumente: advanced_rsync.py <location_1> <location_2>!")
        sys.exit(1)

    print(sys.argv[1], sys.argv[2])
    sync = Sync(sys.argv[1], sys.argv[2])
    sync.start()


main()

if type_location == "ftp":
    return Ftp(location_path)
elif type_location == "zip":
    name = os.path.basename(location_path)
    real_parent = location_path.split(name)[0]
    data_modified = datetime.fromtimestamp(os.path.getmtime(location_path))
    return Zip(name=name, data_modified=data_modified, real_parent=real_parent)
elif type_location == "folder":
    name = os.path.basename(location_path)
    real_parent = location_path.split(name)[0]
    data_modified = datetime.fromtimestamp(os.path.getmtime(location_path))
    return Folder(name=name, data_modified=data_modified, real_parent=real_parent)
else:
    raise ValueError("Invalid location type")



      def status_files(self, location_number, location_current_files, location_1_2_files):
        try:
            list_of_files = self.connection.nlst()
            for file in location_1_2_files:
                name = file.split("/")[-1]
                if file not in list_of_files:
                    location_current_files[name] = (location_1_2_files[file][0], "deleted", location_number)
                else:
                    location_current_files[name][1] = (
                        location_1_2_files[file][0], "unchanged", location_1_2_files[file][2])

            for file in list_of_files:
                name = file.split("/")[-1]
                time_str = self.connection.voidcmd(f'MDTM {file}')[4:]  # returns 3 numbers and a space then the date
                conversion_time = datetime.strptime(time_str[:14], '%Y%m%d%H%M%S')
                if name not in location_1_2_files:
                    if name not in location_current_files:
                        location_current_files[name] = (
                            File(path=file, name=name, data_modified=conversion_time, parent=self.location),
                            "added", location_number)
                    elif location_current_files[name][0].data_modified < conversion_time:
                        location_current_files[name] = (
                            File(path=file, name=name, data_modified=conversion_time, parent=self.location),
                            "modified", location_number)
                    elif location_current_files[name][0].data_modified == conversion_time:
                        location_current_files[name] = (
                            File(path=file, name=name, data_modified=conversion_time, parent=self.location),
                            "unchanged", location_number)
                elif location_1_2_files[name][0].data_modified < conversion_time:
                    location_current_files[name] = (
                        File(path=file, name=name, data_modified=conversion_time, parent=self.location),
                        "modified", location_number)

        except ftplib.all_errors as e:
            logging.error(f"FTP files error: {e}")
            self.connection.quit()
            sys.exit(1)


  #la deleted sa verific daca mai exista calea daca nu nu o mai sterge